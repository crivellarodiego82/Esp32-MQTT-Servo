#include <WiFi.h>
#include <Servo.h>

Servo ObjServo; //Oggetto Servo

// Parametri WiFi
const char* ssid     = "Casa_WiFi_2g";
const char* password = "P@ssw0rd@2020";

// Porta Web Server
WiFiServer server(80);

// Variabile HTTP
String header;

// Variabile settaggio valori
String valueString = String(5);
int pos1 = 0;
int pos2 = 0;

//Servo_pin
const int ServoA = 13;
const int ServoB = 14;
const int ServoC = 15;
const int ServoD = 16;

void setup() {

  
  //ledc setting
  //ServoA
  ledcSetup(0, 90, 8);
  // ServoA
  ledcAttachPin(ServoA, 0);

  //ServoB
  ledcSetup(1, 90, 8);

  // ServoB
  ledcAttachPin(ServoB, 1);

  //ServoC
  ledcSetup(2, 90, 8);

  // ServoC
  ledcAttachPin(ServoC, 2);

  //ServoD
  ledcSetup(3, 90, 8);

  // ServoD
  ledcAttachPin(ServoD, 3);


  Serial.begin(115200);

  // Connetto al Wifi
  Serial.print("Connesso a : ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Stampo parametri connessione
  Serial.println("");
  Serial.println("WiFi connesso.");
  Serial.println("Indirizzo IP : ");
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop() {
  WiFiClient client = server.available();   // Attendo Client

  if (client) {                             // Se client connesso,
    Serial.println("New Client.");          // riporto in porta seriale
    String currentLine = "";                // creo Stringa e attendo dati
    while (client.connected()) {            // creo loop per client
      if (client.available()) {             // 
        char c = client.read();             // 
        Serial.write(c);                    // riporto in porta seriale
        header += c;
        if (c == '\n') {                    // 
          // 
          // 
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><title>Crivellaro ESP32 Servo</title>");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>body { text-align: center; font-family: \"Trebuchet MS\", Arial; margin-left:auto; margin-right:auto;}");
            client.println("#servoPosR{color: red;}");
            client.println("#servoPosG{color: green;}");
            client.println("#servoPosB{color: blue;}");
            client.println(".slider { width: 300px; }</style>");
            client.println("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>");

// 9 - 58 (0 a 180 gradi)


            // Web Page
            client.println("</head><body><h1>ESP32 Multi Servo</h1>");
            //ServoA slide bar
            client.println("<p>Servo PosA: <span id=\"servoPosA\"></span></p>");
            client.println("<input type=\"range\" min=\"7\" max=\"63\" class=\"slider\" id=\"servoSliderA\" onchange=\"servo(this.value,'A')\" value=\"" + valueString + "\"/>");
            //ServoB slide bar
            client.println("<p>Servo PosB: <span id=\"servoPosB\"></span></p>");
            client.println("<input type=\"range\" min=\"7\" max=\"63\" class=\"slider\" id=\"servoSliderB\" onchange=\"servo(this.value,'B')\" value=\"" + valueString + "\"/>");
            //ServoC slide bar
            client.println("<p>Servo PosC: <span id=\"servoPosC\"></span></p>");
            client.println("<input type=\"range\" min=\"7\" max=\"63\" class=\"slider\" id=\"servoSliderC\" onchange=\"servo(this.value,'C')\" value=\"" + valueString + "\"/>");
            //ServoD slide bar
            client.println("<p>Servo PosD: <span id=\"servoPosD\"></span></p>");
            client.println("<input type=\"range\" min=\"7\" max=\"63\" class=\"slider\" id=\"servoSliderD\" onchange=\"servo(this.value,'D')\" value=\"" + valueString + "\"/>");


            client.println("<script>");
            //send A value
            client.println("var sliderA = document.getElementById(\"servoSliderA\");");
            client.println("var servoPA = document.getElementById(\"servoPosA\"); servoPA.innerHTML = sliderA.value;");
            client.println("sliderA.oninput = function() { sliderA.value = this.value; servoPA.innerHTML = this.value; }");

            //send B value
            client.println("var sliderB = document.getElementById(\"servoSliderB\");");
            client.println("var servoPB = document.getElementById(\"servoPosB\"); servoPB.innerHTML = sliderB.value;");
            client.println("sliderB.oninput = function() { sliderB.value = this.value; servoPB.innerHTML = this.value; }");

            //send C value
            client.println("var sliderC = document.getElementById(\"servoSliderC\");");
            client.println("var servoPC = document.getElementById(\"servoPosC\"); servoPC.innerHTML = sliderC.value;");
            client.println("sliderC.oninput = function() { sliderC.value = this.value; servoPC.innerHTML = this.value; }");

            //send D value
            client.println("var sliderD = document.getElementById(\"servoSliderD\");");
            client.println("var servoPD = document.getElementById(\"servoPosD\"); servoPD.innerHTML = sliderD.value;");
            client.println("sliderD.oninput = function() { sliderD.value = this.value; servoPD.innerHTML = this.value; }");

            //HTTP get
            client.println("$.ajaxSetup({timeout:1000}); function servo(pos,color) { ");
            client.println("$.get(\"/?value\" + color + \"=\" + pos + \"&\"); {Connection: close};}</script>");

            client.println("</body></html>");

            //HTTP
            //GET /?value=180& HTTP/1.1

            //ServoA
            if (header.indexOf("GET /?valueA=") >= 0) {
              pos1 = header.indexOf('=');
              pos2 = header.indexOf('&');
              valueString = header.substring(pos1 + 1, pos2);

              //Servo valueString
              ledcWrite(0, valueString.toInt());
              Serial.println(valueString);
            }

            //ServoB
            if (header.indexOf("GET /?valueB=") >= 0) {
              pos1 = header.indexOf('=');
              pos2 = header.indexOf('&');
              valueString = header.substring(pos1 + 1, pos2);


              //Servo valueString
              ledcWrite(1, valueString.toInt());
              Serial.println(valueString);
            }

            //ServoC
            if (header.indexOf("GET /?valueC=") >= 0) {
              pos1 = header.indexOf('=');
              pos2 = header.indexOf('&');
              valueString = header.substring(pos1 + 1, pos2);


              //Servo valueString
//              ledcWrite(2, valueString.toInt());
 //             Serial.println(valueString);
            }

            //ServoD
            if (header.indexOf("GET /?valueD=") >= 0) {
              pos1 = header.indexOf('=');
              pos2 = header.indexOf('&');
              valueString = header.substring(pos1 + 1, pos2);


              //Servo valueString
//              ledcWrite(3, valueString.toInt());
//              Serial.println(valueString);
            }

            // HTTP
            client.println();
            // Break out of the while loop
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    // Clear the header variable
    header = "";
    // 
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
